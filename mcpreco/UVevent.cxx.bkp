//----------APS Analysis
//----------Author's Name:Jingbo WANG
//----------Copyright:Those valid for ANL
//----------Modified:22/07/2014
#include "RVersion.h"
#include "TRandom.h"
#include "TDirectory.h"
#include "TProcessID.h"
#include "TMath.h"
#include "UVevent.h" 

using namespace std;

ClassImp(UVevent)
ClassImp(Waveform)

TClonesArray *UVevent::fgWaveforms = 0;

// ------------------------------------------------------ 
// UVevent 
// ------------------------------------------------------
UVevent::UVevent() 
{ 
  // Create an UVevent object.
   // When the constructor is invoked for the first time, the class static
   // variable fgTracks is 0 and the TClonesArray fgTracks is created.
	if (!fgWaveforms) fgWaveforms = new TClonesArray("Waveform", 1000);
	fwav = fgWaveforms;
	fnwav = 0;
	WavDimSize = 1032;
	WavSampleRate = 1.e10;
	WavDeltat = 100;
}

UVevent::~UVevent() {
	Clear();
}  

void UVevent::Initialize() {
	for(int i=0;i<WavDimSize;i++) {
		WavDeltat = 1.e12/WavSampleRate;
		t.push_back(i*1.e12/WavSampleRate);
		fz.push_back(i*WavSampleRate/WavDimSize); //Hz
	}
}

void UVevent::UVeventAnalysis()
{	}

void UVevent::Clear(Option_t * /*option*/)
{
   fwav->Clear("C"); //will also call Waveform::Clear
   fnwav = 0;
   t.clear();
   fz.clear();
//	for(int i=0;i<60;i++) {wav[i].Clear();}  

//   delete fwav;
   
}

// ------------------------------------------------------ 
// Waveform 
// ------------------------------------------------------
Waveform::Waveform()
{
//	cout<<"Class Waveform"<<endl;
//	hwav = new TH1F("wav","wav",DimSize,0,103.2);
        fsplinewav = 0;
        fsplinecfd = 0;
        hwav = 0;
	//hwav_raw = 0;
        hcfd = 0;
	Samplerate = 1e10; //Hz
	Deltat = 100;
	DimSize = 256;
	baseline = 0;
	CutoffFrequency = 5e8;
	PointsPerSpline = 5;
	Fraction_CFD = 0.5;
	Delay_CFD = 100;
	DisWindow_min = 0;
	DisWindow_max = DimSize*Deltat;
	FitWindow_min = 0;
	FitWindow_max = DimSize*Deltat;
	GaussRange_min = 0;
	GaussRange_max = DimSize*Deltat;

	npeaks = 0;
	MinimumTot = 100;
	DoFFT = 0;
	IfDynamicWindow = 0;
}

Waveform::~Waveform() {
	Clear();
//	delete hwav;
//	delete froot;
//	delete fsplinewav;
}

void Waveform::Clear(Option_t * /*option*/)
{
   // Note that we intend on using TClonesArray::ConstructedAt, so we do not
   // need to delete any of the arrays.
   TObject::Clear(); 
	delete hwav; hwav = 0;
	//delete hwav_raw; hwav_raw = 0;
	delete hcfd; hcfd = 0;
	delete hpedhist; hpedhist = 0;
	delete fsplinewav; fsplinewav = 0;
	delete fsplinecfd; fsplinecfd = 0;
	vol.clear();
	//vol_raw.clear();
	vol_fft.clear();
	re_fft.clear();
	im_fft.clear();
}

void Waveform::Initialize(float* fvol, bool nottrig) //call it with Set(&fvol[0])
{
  //Set values for the Waveform members
  
  sprintf(WavName, "wav_ch%d_%d", chno, evtno);
  //sprintf(WavNameRaw, "wavraw_ch%d_%d", chno, evtno);
  sprintf(CFDName, "CFD_ch%d_%d", chno, evtno);
  sprintf(PEDName, "PED_ch%d_%d", chno, evtno);
  hwav = new TH1D(WavName, WavName, DimSize, 0, DimSize*Deltat);
  //hwav_raw = new TH1D(WavNameRaw, WavNameRaw, DimSize, 0, DimSize*Deltat);
  hcfd = new TH1D(CFDName, CFDName, DimSize, 0, DimSize*Deltat);
  hpedhist = new TH1D(PEDName, PEDName, 100,-5.0,5.0);

  /*  
  for(int i=0;i<DimSize;i++) {
    vol_raw.push_back(*(fvol+i));
    hwav_raw->SetBinContent(i+1, vol_raw[i]);
  }
  */

  //	Calculate_baseline(&fvol[0]);
  Calculate_baseline2(&fvol[0], nottrig);
  //	TF1 *fsin = new TF1("fsin", "40*sin(2*3.14*1e9*x)", 0,1);
  double Fs = 1e10; //sampling rate = 10GHz
  double Ts = 1.e12/Fs; //100ps/point
  for(int i=0;i<DimSize;i++) {
    vol.push_back(*(fvol+i)-baseline);
    //		vol[i] = *(fvol+i)-baseline;
    hwav->SetBinContent(i+1, vol[i]);
  }
  AmpThreshold = 60;
  Fraction_CFD = 0.5;
  Delay_CFD = 10;
  AnalysisOption = "normal";
}


float Waveform::Calculate_baseline(float* fvol) {
	TH1D *hwavbaseline = new TH1D("hwavbaseline","hwavbaseline",DimSize,0,DimSize*Deltat);
	for(int i=0;i<200;i++) {
//		SetVol(i, *(fvol+i));
		hwavbaseline->SetBinContent(i+1,*(fvol+i));
	}
	TF1 *f1 = new TF1("f1", "[0]");
	hwavbaseline->Fit("f1","NQR");
	baseline = f1->GetParameter(0);
	delete hwavbaseline;
	hwavbaseline = NULL;
	delete f1;
	f1 = NULL;
	return baseline;
}

//============== CALCULATING THE BASELINE: SECOND METHOD ==============//

float Waveform::Calculate_baseline2(float* fvol, bool nottrig) {
	double acc = 0;
	TH1D* hnoise = new TH1D("hnoise","hnoise",100,-5.,5.);
    TH1D* hbline = new TH1D("hbline","hbline",100,-5.,5.);
    
    bool istrigchan=false;
    

	for(int i=0;i<1000;i++) {
      if(i<200) hnoise->Fill(*(fvol+i));
        hbline->Fill(*(fvol+i));
      if( fabs(*(fvol+i)) > 100. ) istrigchan=true;
        
	  if( (i>=30) && (i<190) ) {
//		SetVol(i, *(fvol+i));
		acc += *(fvol+i);
	  }
	}
    
    double bgmean=0;
	double meanped=0;
	baseline=0;
    
    TF1* mgf = new TF1("mgf","gaus");
    if(nottrig){
        hbline->Fit(mgf,"q");
        baseline = mgf->GetParameter(1);
        bnoise = mgf->GetParameter(2);
    } else {
        bnoise = hnoise->GetRMS();
        baseline = acc/160.;
    }
    
    
    for(int i=0;i<1000;i++) {       //subtracting the baseline
        hpedhist->Fill(*(fvol+i));
	}
    
	delete mgf;
	delete hnoise;
    delete hbline;
	return baseline;
}




//============== CALCULATING THE BASELINE: THIRD METHOD ==============//
// fit with a sine wave

/*
float Waveform::Calculate_baseline3(float* fvol, bool nottrig) {


  TF1* sinewave = new TF1("sinewave","[0]+[1]*sin([2]*x + [3])");

	double acc = 0;
	TH1D* hnoise = new TH1D("hnoise","hnoise",100,-5.,5.);
    TH1D* hbline = new TH1D("hbline","hbline",100,-5.,5.);
    
    bool istrigchan=false;
    

	for(int i=0;i<1000;i++) {
      if(i<200) hnoise->Fill(*(fvol+i));
        hbline->Fill(*(fvol+i));
      if( fabs(*(fvol+i)) > 100. ) istrigchan=true;
        
	  if( (i>=30) && (i<190) ) {
//		SetVol(i, *(fvol+i));
		acc += *(fvol+i);
	  }
	}
    
    double bgmean=0;
	double meanped=0;
	baseline=0;
    
    TF1* mgf = new TF1("mgf","gaus");
    if(nottrig){
        hbline->Fit(mgf,"q");
        baseline = mgf->GetParameter(1);
        bnoise = mgf->GetParameter(2);
    } else {
        bnoise = hnoise->GetRMS();
        baseline = acc/160.;
    }
    
    
    for(int i=0;i<1000;i++) {       //subtracting the baseline
        hpedhist->Fill(*(fvol+i));
	}
    
	delete mgf;
	delete hnoise;
    delete hbline;
	return baseline;
}
*/



int Waveform::Calculate_Peaks() {
	npeaks=0;
	double threshold = TotThreshold;
	double vol = 0, vollast = 0;
	int nbin = hwav->GetNbinsX();
	int length = 0;
	int MinimumTotBin = (int)(MinimumTot/Deltat);
	for(int i=0;i<nbin;i++) {
		vol = TMath::Abs(hwav->GetBinContent(i+1));
		if(vol>threshold) {length++;}
		else {
			if(length<MinimumTotBin) {length=0;}
			else {npeaks++; length = 0;}	
		}
		
	}
	return npeaks;
}


float Waveform::FWPM(float frac) {

  // cout<<"before "<<endl;

  bool lside=false;
  bool rside=false;
  float fh = frac*amp;
  int mbin = hwav->GetMinimumBin();
  
  //  cout<<"OK, I'm here..."<<mbin<<" "<<amp<<" "<<fh<<endl;

  int i=1;
  while( !lside && !rside ){
    if( fabs(hwav->GetBinContent(mbin-i)) < fh ) lside=true;
    if( fabs(hwav->GetBinContent(mbin+i)) < fh ) lside=true;
      if(i>200) break;
    //    cout<<i<<endl;
    i++;
  }       

  float thewidth = ((float)i)*Deltat;

  //  cout<<"DONE "<<thewidth<<endl;

  return thewidth;
}


float Waveform::Calculate_amp() { 
//	amp = TMath::Abs(fsplinewav->V(hwav->GetMaximumBin()));
	amp = TMath::Abs(hwav->GetMinimum());
	return amp;
}

float Waveform::Calculate_Charge() {
	qtot = TMath::Abs(hwav->Integral()*Deltat/50); //fC = 1e-15C
	qfast = TMath::Abs(hwav->Integral(FitWindow_min/Deltat, FitWindow_max/Deltat)*Deltat/50);
	gain = qfast/1.6e-4; //number of electrons
}


float Waveform::Waveform_Filter1(float CutoffFrequency, float finput) {
	double f = 0;
	if(finput<CutoffFrequency) f=1;
		else f=0;
	return f;
}

double Waveform::Calculate_RisingTime() {
	if(amp <= AmpThreshold || npeaks==0) return 0;
	int bin = hwav->GetMinimumBin();
	int peakbin = bin;
	double x0,x1,y0,y1,k;
	double peaktime = hwav->GetBinCenter(peakbin);
	while(hwav->GetBinContent(bin)<-amp*0.9) {bin--;}
	x1 = hwav->GetBinCenter(bin);
	x0 = hwav->GetBinCenter(bin-1);
	y1 = hwav->GetBinContent(bin);
	y0 = hwav->GetBinContent(bin-1);
	k = (y1-y0)/(x1-x0);
	double hightime = (-amp*0.9-y0+k*x0)/k;
	while(hwav->GetBinContent(bin)<-amp*0.1) {bin--;}
	x1 = hwav->GetBinCenter(bin);
	x0 = hwav->GetBinCenter(bin-1);
	y1 = hwav->GetBinContent(bin);
	y0 = hwav->GetBinContent(bin-1);
	k = (y1-y0)/(x1-x0);
	double lowtime = (-amp*0.1-y0+k*x0)/k;
	risingtime = hightime - lowtime;
	return risingtime;
}

float Waveform::Waveform_Filter2(float CutoffFrequency, int T, float finput) {
	double f = 1.0/(1+TMath::Power(finput/CutoffFrequency, 2*T));
//	TF1 *f1 = new TF1("f1","1/(1+(x/[0])^[1])",0,1e10);
	return f;
}


float Waveform::Filter_KURE(int T, float finput){
    
    double f1 = 1.0/(1+TMath::Power(finput/87.0e6, 2*T));
    double f2 = 1.0-(1.0/(1+TMath::Power(finput/90.0e6, 2*T)));
    
    return (f1+f2);
}


void Waveform::Waveform_FFT() {
	//Look at the real part of the output
	TH1 *hr = 0;
	hr = hwav->FFT(hr, "RE");
	hr->SetName("hr");
	hr->SetTitle("Real part of the 1st transform");
   hr->GetXaxis()->Set(DimSize,0,1e10); //Hz

/*	//Look at the imaginary part of the output
	 TH1 *him = 0;
	him = hwav->FFT(him, "IM");
	him->SetName("him");
	him->SetTitle("Imaginary part of the 1st transform");
	him->GetXaxis()->Set(DimSize,0,1e10);*/

	//Look at the DC component and the Nyquist harmonic:
   double re, im;
   //That's the way to get the current transform object:
   TVirtualFFT *fft = TVirtualFFT::GetCurrentTransform();
   //Use the following method to get the full output:
   double *re_full = new double[DimSize];
   double *im_full = new double[DimSize];
   fft->GetPointsComplex(re_full,im_full);
   //filter
	for(int i=0;i<DimSize;i++) {
//		double f = Waveform_Filter1(5e8, i*1.0e10/DimSize);
		double f = Waveform_Filter2(CutoffFrequency, 4, i*1.0e10/DimSize);
        // Filter out 88.5 KURE Ames Alternative
		//double f2 = Filter_KURE(20, i*1.0e10/DimSize);
        
		
		if( ((i*1.0e10/DimSize)>86.0e6) && ((i*1.0e10/DimSize)<91.0e6) ){
            f=0.0001;
        }

		re_full[i] = re_full[i]*f;
		im_full[i] = im_full[i]*f;
	}
	//Now let's make a backward transform:
   TVirtualFFT *fft_back = TVirtualFFT::FFT(1, &DimSize, "C2R M K");
   fft_back->SetPointsComplex(re_full,im_full);
   fft_back->Transform();
   TH1 *hb = 0;
   //Let's look at the output
   hb = TH1::TransformHisto(fft_back,hb,"Re");
   hb->SetTitle("The backward transform result");
   hb->Scale(1.0/DimSize);
   hb->GetXaxis()->Set(DimSize,0,DimSize*Deltat); //ps
   for(int i=0;i<DimSize;i++) {
	hwav->SetBinContent(i+1, hb->GetBinContent(i+1));
	vol_fft.push_back(hb->GetBinContent(i+1));
	re_fft.push_back(hr->GetBinContent(i+1));
//	im_fft.push_back(him->GetBinContent(i+1));
//	vol_fft[i] = hb->GetBinContent(i+1);
//	re_fft[i] = hr->GetBinContent(i+1);
//	im_fft[i] = him->GetBinContent(i+1);
	
   }
   delete hr;
//   delete him;
   delete hb;
   delete re_full;
   delete im_full;
   delete fft;
   delete fft_back;
   hr=0;
//   him=0;
   hb=0;
   re_full=0;
   im_full=0;
   fft=0;
   fft_back=0;
	
}


void Waveform::Calculate_fitrange() {
	int bin = hwav->GetMinimumBin();
	int peakbin = bin;
	double peaktime = hwav->GetBinCenter(peakbin);
	if(npeaks==0) return;
	while(hwav->GetBinContent(bin)<-amp/2) {bin--;}
	double lowtime = hwav->GetBinCenter(bin);
	double fwhm = 2*(peaktime-lowtime);
	double xmin = peaktime-fwhm;
	double xmax = peaktime+fwhm;
	if(xmin<0 || xmax>DimSize*Deltat) return;
//	if(3*fwhm<700) return;
	FitWindow_min = peaktime - fwhm;
	FitWindow_max = peaktime + 2*fwhm;
//	FitWindow_min = peaktime - 1500;
//	FitWindow_max = peaktime + 1500;
}

void Waveform::Waveform_Fit() {
	sprintf(SplineName, "SplineFit_ch%d_%d", chno, evtno);
	sprintf(SplineTitle, "SplineFit | SplineFit_ch%d_%d", chno, evtno);
	if(amp <= AmpThreshold || npeaks==0) return;
	else {
		if(IfDynamicWindow == 1) Calculate_fitrange();
		fsplinewav = new TSplineFit(SplineName, SplineTitle, 20, PointsPerSpline, hwav, FitWindow_min, FitWindow_max); 
		fsplinewav->UpdateFile(true); //SplineFit database:  Skip this line for fast analysis
		fsplinewav->ReduceMemory();	//Store only X and Y. Apply this line for fast analysis
	}
	
}

float	Waveform::CFD_Discriminator1() { //Appoximate CFD
	if(amp <= AmpThreshold) { time = 0; } //TDC threshold
	else {
		if(IfDynamicWindow == 1) Calculate_fitrange();
		Waveform_Fit();
		SetFraction_CFD(0.5);
		double th = -1.0 * Fraction_CFD * amp;
//		double th = -40;
		double eps = 1e-4;
		int bin = hwav->GetMinimumBin();
//		while(fsplinewav->V(hwav->GetBinCenter(bin))<=th) {bin--;}
		double xlow = FitWindow_min;
		double xhigh = hwav->GetBinCenter(bin);

		double xmid = (xlow+xhigh)/2;
		if(fsplinewav->V(xmid)-th==0) time = xmid;

		while ((xhigh-xlow) >= eps) {
			xmid = (xlow + xhigh) / 2;
			if (fsplinewav->V(xmid)-th == 0)
				time = xmid;
			if ((fsplinewav->V(xlow)-th)*(fsplinewav->V(xmid)-th) < 0)
				xhigh = xmid;
			else
				xlow = xmid;
		}
		time = xlow;
	}
	return time;
}	


float	Waveform::CFD_Discriminator2() {	//Exact CFD
	sprintf(CFDSplineName, "CFDSpline_ch%d_%d", chno, evtno);
	sprintf(CFDSplineTitle, "CFDSpline | CFDSpline_ch%d_%d", chno, evtno);
	if(amp <= AmpThreshold || npeaks==0) { time = 0; } //TDC threshold
	else {
		if(IfDynamicWindow == 1) Calculate_fitrange();
		int Delay_CFDBin = (int)(Delay_CFD/Deltat);
		for(int i=0;i<DimSize;i++) {hcfd->SetBinContent(i+1, hwav->GetBinContent(i+1));} //copy
		TH1D *hinv = new TH1D("hinv","hinv",DimSize,0,DimSize*Deltat);
		for(int i=0;i<DimSize;i++) {
			if(i+Delay_CFDBin<DimSize) hinv->SetBinContent(i+1, hwav->GetBinContent(i+1+Delay_CFDBin)); //copy and delay
			else hinv->SetBinContent(i+1,0);
		}
		hinv->Scale(-1. * Fraction_CFD); //inverse and attenuate
		hcfd->Add(hinv);
		fsplinecfd = new TSplineFit(CFDSplineName,CFDSplineTitle,50,PointsPerSpline, hcfd,FitWindow_min, FitWindow_max);
//		fsplinecfd->UpdateFile(true); //SplineFit database:  Skip this line for fast analysis
		fsplinecfd->ReduceMemory();
	
//solve equation
		double eps = 1e-4;
		double xhigh = hcfd->GetMinimumBin()*Deltat;
//		double xlow = hcfd->GetMaximumBin()*Deltat;
		double xlow = FitWindow_min;
//		cout<<xlow<<"\t"<<xhigh<<endl;
		double xmid = (xlow+xhigh)/2;
	
		if(fsplinecfd->V(xmid)==0) time = xmid;

		while ((xhigh-xlow) >= eps) {
			xmid = (xlow + xhigh) / 2;
			if (fsplinecfd->V(xmid) == 0)
				time =  xmid;
			if (fsplinecfd->V(xlow)*fsplinecfd->V(xmid) < 0)
				xhigh = xmid;
			else
				xlow = xmid;
		}
		time = xlow;
		delete hinv;
		hinv = NULL;
	}
	return time;
}

float Waveform::GaussFit() {
	char gausname[100];
	sprintf(gausname, "gausfit_ch%d_%d", chno, evtno);
	if(amp <= AmpThreshold || npeaks==0) { time = 0; } //TDC threshold
	else {
		if(IfDynamicWindow == 1) Calculate_fitrange();
		TF1* mgf = new TF1(gausname,"[0]*exp(-0.5*((x-[1])/[2])^2)+[3]", 0, DimSize*Deltat);
		int bin = hwav->GetMinimumBin();
		double peaktime = hwav->GetBinCenter(bin);
		mgf->SetParameter(0, -amp);
		mgf->SetParameter(1, Deltat*hwav->GetMinimumBin());
		mgf->SetParameter(2, 400);
		mgf->SetParameter(3, 0);
		hwav->Fit(gausname,"QR", "", FitWindow_min, FitWindow_max);
		double par[4];
		mgf->GetParameters(&par[0]);
		double y = -0.5*amp;
		time = par[2]*sqrt(-2*log((y-par[3])/par[0]))+par[1];
		delete mgf; mgf = 0;
	}
	return time;
}


// A gaussian fit to the peak, followed by a gaussian fit over the whole specified range


Float_t	Waveform::DoubleGaussFit(bool floatbaseline) {

	gmean=0;      gpeak=0;      gsigma=0;      gtime=0;    gchi2=0;
	
	ggmean=0;     ggpeak=0;     ggsigma=0;     ggmean2=0.;
	ggpeak2=0;    ggsigma2=0;   ggtime=0;      ggtime2=0.;
	ggoffset=0;   ggchi2=0;

	if(amp <= AmpThreshold || npeaks==0) { time = 0; } //TDC threshold
	else {
		if(IfDynamicWindow == 1) Calculate_fitrange();

		Double_t amp = TMath::Abs(hwav->GetMinimum());
		int maxbin = hwav->GetMinimumBin();
		double lowrange = hwav->GetBinCenter(maxbin-4);
		double hirange = hwav->GetBinCenter(maxbin+4);
		
		if( (hwav->GetBinCenter(maxbin)<FitWindow_max)&&(hwav->GetBinCenter(maxbin)>FitWindow_min) ){
		  TF1* mgf = new TF1("mgf","gaus",lowrange,hirange);
		  mgf->SetParameter(0, -amp);
		  mgf->SetParameter(1, Deltat*hwav->GetMinimumBin());
		  mgf->SetParameter(2, 400);
		  
		  hwav->Fit("mgf","QR");
		  
		  double peaktime = mgf->GetParameter(1);
		  
		  double flowrange = peaktime - GaussRange_min;
		  double fhirange = peaktime + GaussRange_max;
		  
		  if(peaktime<FitWindow_max&&peaktime>FitWindow_min){
		    
		    TF1* mgf2;
		    if(!floatbaseline) mgf2 = new TF1("mgf2","gaus",flowrange,fhirange);
		    else mgf2 = new TF1("mgf2","[0]*exp(-0.5*((x-[1])/[2])^2)+[3]", flowrange, fhirange);
		    
		    double nparam = 4;
		    if(!floatbaseline) nparam=3;
		    		    
		    mgf2->SetParameter(0, -amp);
		    mgf2->SetParameter(1, Deltat*hwav->GetMinimumBin());
		    mgf2->SetParameter(2, 400);
		    if(floatbaseline) mgf2->SetParameter(3,0);
		    
		    hwav->Fit("mgf2","QR");	    
		    double mgpeak = mgf2->GetParameter(0);
		    double mgmean = mgf2->GetParameter(1);
		    double mgsigma = mgf2->GetParameter(2);
		    double mgoffset;
		    if(floatbaseline) mgoffset = mgf2->GetParameter(3);
		    else mgoffset=0;
		    double mgchi2= mgf2->GetChisquare();
		    
     		    gmean=mgmean;
		    gpeak=mgpeak;
		    gsigma=mgsigma;
		    //		    gtime=mgmean-sqrt(-mgsigma*mgsigma*log(0.37));
		    gtime=mgmean-sqrt(-mgsigma*mgsigma*log(0.1));
		    goffset=mgoffset;
		    gchi2=mgchi2;
		    gdegfree = (hwav->FindBin(fhirange))-(hwav->FindBin(flowrange))-nparam;

		    delete mgf;
		    delete mgf2;
		  } 
		}
	}
	
	return time;
}


// Not really used - a gaussian fit to the peak, followed by a double-gaussian fit over the whole specified range

Float_t	Waveform::DoubleDoubleGaussFit() {
	
	ggmean=0;     ggpeak=0;     ggsigma=0;     ggmean2=0.;
	ggpeak2=0;    ggsigma2=0;   ggtime=0;      ggtime2=0.;
	ggoffset=0;   ggchi2=0;

        char gausname[100];
	sprintf(gausname, "gausfit_ch%d_%d", chno, evtno);
	if(amp <= AmpThreshold || npeaks==0) { time = 0; } //TDC threshold
	else {
		if(IfDynamicWindow == 1) Calculate_fitrange();

		Double_t amp = TMath::Abs(hwav->GetMinimum());
		int maxbin = hwav->GetMinimumBin();
		double lowrange = hwav->GetBinCenter(maxbin-6);
		double hirange = hwav->GetBinCenter(maxbin+6);

		if( (hwav->GetBinCenter(maxbin)<FitWindow_max)&&(hwav->GetBinCenter(maxbin)>FitWindow_min) ){
	  	  TF1* mgf = new TF1("mgf","gaus",lowrange,hirange);
		  mgf->SetParameter(0, -amp);
		  mgf->SetParameter(1, Deltat*hwav->GetMinimumBin());
	  	  mgf->SetParameter(2, 400);

		  hwav->Fit("mgf","QR");
	  
		  double peaktime = mgf->GetParameter(1);
	  
		  double flowrange = peaktime-2650.;
		  double fhirange = peaktime+400.;
	  
		  if(peaktime<FitWindow_max&&peaktime>FitWindow_min){

		    TF1* mgf2 = new TF1("mgf2","[0]*exp(-0.5*((x-[1])/[2])^2)+[3]*exp(-0.5*((x-[4])/[5])^2)+[6]", flowrange, fhirange);

		    mgf2->SetParameter(0, -amp);
	       	    mgf2->SetParameter(1, Deltat*hwav->GetMinimumBin());
	    	    mgf2->SetParameter(2, 400);
	   	    mgf2->SetParameter(3, -amp);
	   	    mgf2->SetParameter(4, Deltat*hwav->GetMinimumBin()+100);
	   	    mgf2->SetParameter(5, 400);
	  	    mgf2->SetParameter(6,0);

  		    hwav->Fit("mgf2","QR");	    
	    	    double mgpeak = mgf2->GetParameter(0);
	     	    double mgmean = mgf2->GetParameter(1);
	     	    double mgsigma = mgf2->GetParameter(2);

	       	    double mgpeak2 = mgf2->GetParameter(3);
	   	    double mgmean2 = mgf2->GetParameter(4);
	   	    double mgsigma2 = mgf2->GetParameter(5);
	   	    double mgoffset = mgf2->GetParameter(6);
	   	    double mgchi2= mgf2->GetChisquare();
	   	    double nparam = 7;
  
	   	    ggmean=mgmean;
	   	    ggpeak=mgpeak;
	  	    ggsigma=mgsigma;
	  	    ggmean2=mgmean2;
	  	    ggpeak2=mgpeak2;
	  	    ggsigma2=mgsigma2;
	  	    ggtime=mgmean-sqrt(-mgsigma*mgsigma*log(0.03));
	  	    ggtime2=mgmean2-sqrt(-mgsigma2*mgsigma2*log(0.03));
	 	    ggoffset=mgoffset;
	 	    ggchi2=mgchi2;
	 	    ggdegfree = ((double)hwav->FindBin(fhirange))-((double)hwav->FindBin(flowrange)) - nparam;

		    delete mgf;
		    delete mgf2;
	 	 } // if seed fit in final time window
	  //	Cout<<" "<<Mgmean<<Endl=gtime;
		} // if raw peak is in time window 	 
	} //else (more than zero pulse candidates
	return time;
}

Float_t Waveform::DoTemplateFit(TemplateFit* mtf){

	ttime=0;
	tscale=0;
	tchi2=0;

     	if(amp <= AmpThreshold || npeaks==0) { time = 0; } //TDC threshold
	//	if(amp <= AmpThreshold) { time = 0; } //TDC threshold
	//	if(npeaks==0) { time = 0; } //TDC threshold
	else {
		if(IfDynamicWindow == 1) Calculate_fitrange();

		
		Double_t amp = TMath::Abs(hwav->GetMinimum());
		int maxbin = hwav->GetMinimumBin();


		// Attempt to follow the Gaussfit and set range dynamically (not currently used?)
		/*
		double lowrange = hwav->GetBinCenter(maxbin-6);
		double hirange = hwav->GetBinCenter(maxbin+6);
		
		TF1* mgf = new TF1("mgf","gaus",lowrange,hirange);
		mgf->SetParameter(0, -amp);
		mgf->SetParameter(1, Deltat*hwav->GetMinimumBin());
		mgf->SetParameter(2, 400);
		
		hwav->Fit("mgf","QR");
		
		double peaktime = mgf->GetParameter(1);
		
		double flowrange = peaktime-1100.;
		double fhirange = peaktime+250.;

		mtf->SetTempRange(flowrange,fhirange);
		mtf->SetFitRange(flowrange,fhirange);
 	        */
		
		/////////////////////////////////////////////////////////
		
		if( (hwav->GetBinCenter(maxbin)<FitWindow_max)&&(hwav->GetBinCenter(maxbin)>FitWindow_min) ){

			TH1D* gthetemplate = mtf->ReturnTemplate(true);
			mtf->FitWithTemplate(hwav,ttime,tscale,tchi2);
			tamp = tscale*(fabs(gthetemplate->GetMinimum()));
			
			double binwidth;
			binwidth = gthetemplate->GetBinWidth(1);

			tcharge = ((-tscale)*binwidth*(gthetemplate->Integral())*6241.5)/50.;
			tNS=0;
			if(tamp>0) tNS = bnoise/tamp;
			tdegfree=0.;
		}
		time=ttime;
	}
	return time;
}

void Waveform::Analyze() {
	DisWindow_min = 0;
	DisWindow_max = DimSize*Deltat;
	hwav->GetXaxis()->SetRange(DisWindow_min/Deltat,DisWindow_max/Deltat);
	hcfd->GetXaxis()->SetRange(DisWindow_min/Deltat,DisWindow_max/Deltat);
	
	if(DoFFT==1)	Waveform_FFT();
	Calculate_Peaks();
	Calculate_amp();
	FWHM = FWPM(0.5);
	FW20pM = FWPM(0.2);
	Calculate_Charge();
//	Calculate_RisingTime();
//	CFD_Discriminator1();	//approximate CFD
	CFD_Discriminator2();	 // exact CFD
	DoubleGaussFit(0);
//      DoubleDoubleGaussFit();

}

// Overloaded version of the Analyze function that includes the template fit 

void Waveform::Analyze(TemplateFit* mtf) {
	DisWindow_min = 0;
	DisWindow_max = DimSize*Deltat;
	hwav->GetXaxis()->SetRange(DisWindow_min/Deltat,DisWindow_max/Deltat);
	hcfd->GetXaxis()->SetRange(DisWindow_min/Deltat,DisWindow_max/Deltat);
	
	if(DoFFT==1)	Waveform_FFT();
	Calculate_Peaks();
	Calculate_amp();
	FWHM = FWPM(0.5);
	FW20pM = FWPM(0.2);
	Calculate_Charge();
//	Calculate_RisingTime();
//	CFD_Discriminator1();	//approximate CFD
	CFD_Discriminator2();	 // exact CFD
	DoubleGaussFit(0);
	DoTemplateFit(mtf);	
//      DoubleDoubleGaussFit();

}
